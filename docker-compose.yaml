version: '3.8'

services:
  location-build:
    image: build:latest
    build:
      context: "."
      dockerfile: ".docker/location/build.Dockerfile"

  location:
    build:
      context: "."
      dockerfile: ".docker/location/app.Dockerfile"
    restart: unless-stopped
    depends_on:
      location-build:
        condition: service_completed_successfully
      postgresql:
        condition: service_healthy
    volumes:
      - './.config/location/config.docker.yaml:/app/config.yaml'
      - './migrations/location/:/app/migrations/location/'
    ports:
      - "8080:8080"
      - "9000:9000"

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongodb
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: driver
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 3

  postgresql:
    image: postgres:latest
    container_name: postgresql
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: location
    healthcheck:
      test: "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./deployments/prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./deployments/grafana:/etc/grafana/provisioning/datasources

  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    restart: always
    ports:
      - "16686:16686"
      - "14268"
      - "14250"

  otel-collector:
    image: otel/opentelemetry-collector:0.88.0
    restart: always
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./deployments/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus' metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver

    depends_on:
      - jaeger-all-in-one

volumes:
  prom_data: